[{"content":"Java入门学习（长期施工） 算法暂且搁置（大概）；今天（2025.05.20）先摸了\n","date":"2025-05-20T22:11:52+08:00","permalink":"https://CoCoHina.github.io/p/learn/","title":"Learn"},{"content":"基础算法入门记录(长期施工) 用快一个月摸完了基础数据结构，来搞算法了。学习道，堂堂连载！\n数组 二分查找\t2025.4.21 力扣 N.704\n给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #采用左闭右开区间法 ——\u0026gt;[left,right) #感觉左闭右闭跟好理解（） class Solution { public: int search(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target) { int left=0,right=nums.size(); while(left\u0026lt;right){ int middle=(left+right)/2; if(nums[middle]==target){ return middle; } else if(nums[middle]\u0026lt;target) {left=middle+1;} else {right=middle;} } return -1; } }; 删除元素——双指针 2025.4.21 力扣 N.27\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #快指针指向的是新数组所需要的元素，慢指针指向的是新数组的元素 #（把快慢指针所指当成两个数组，符合条件的fast指向值会被填入slow组） class Solution { public: int removeElement(vector\u0026lt;int\u0026gt;\u0026amp; nums, int val) { int k=0; int slow=0; int fast=0; for(fast=0;fast\u0026lt;nums.size();fast++){ if(nums[fast]!=val){ nums[slow]=nums[fast]; slow++; k++; } } return k; } }; 有序数组的平方——双指针 力扣N.977\n给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。、\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution { public: vector\u0026lt;int\u0026gt; sortedSquares(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int k=nums.size()-1; vector\u0026lt;int\u0026gt; result(nums.size()); for(int i=0,j=k;i\u0026lt;=j;){ if(nums[i]*nums[i]\u0026lt;nums[j]*nums[j]){ result[k]=nums[j]*nums[j]; j--; k--; } else{ result[k]=nums[i]*nums[i]; k--; i++; } } return result; } }; 长度最小的子数组——滑动窗口 力扣N.209\n给定一个含有 n 个正整数的数组和一个正整数 target 。\n找出该数组中满足其总和大于等于 target 的长度最小的 子数组 [numsl, numsl+1, ..., numsr-1, numsr] ，并返回其长度**。**如果不存在符合条件的子数组，返回 0 。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Solution { public: int minSubArrayLen(int target, vector\u0026lt;int\u0026gt;\u0026amp; nums) { int result=nums.size(); int start=0,end=0; int subL=0; bool extin=0; int sum=0; for(;end\u0026lt;nums.size();end++){ sum+=nums[end]; while(sum\u0026gt;=target){ extin=1; subL=end-start+1; if(result\u0026gt;subL){ result=subL; } sum-=nums[start]; start++; } } if(extin==1){return result;} else{return 0;} } }; 螺旋矩阵 II 力扣N.59\n给你一个正整数 n ，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 #要点是确定循环不变量（每一行/列*仅不处理*队伍末尾元素） class Solution { public: vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; generateMatrix(int n) { vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; result(n,vector\u0026lt;int\u0026gt;(n,0)); int startx=0,starty=0; int offsite=1; int count=1; int loop=n/2; int i=0,j=0; while(loop--){ i=starty; j=startx; for(j=startx;j\u0026lt;n-offsite;j++){ result[i][j]=count++; } for(i=starty;i\u0026lt;n-offsite;i++){ result[i][j]=count++; } for(;j\u0026gt;startx;j--){ result[i][j]=count++; } for(;i\u0026gt;starty;i--){ result[i][j]=count++; } offsite++; startx++; starty++; } if(n%2){ result[startx][starty]=count++; } return result; } }; 数组块，堂堂完结！\n哈希表，开！\n哈希表 有效的字母异位词 LCR 032. 有效的字母异位词\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #这题有点坑，次序完全相同也得返回false class Solution { public: bool isAnagram(string s, string t) { if (s==t){return false;} int hash[26]={0}; for(int i=0;i\u0026lt;s.size();i++){ hash[s[i]-\u0026#39;a\u0026#39;]+=1; } for(int i=0;i\u0026lt;t.size();i++){ hash[t[i]-\u0026#39;a\u0026#39;]-=1; } bool Isok=1; for(int i=0;i\u0026lt;26;i++){ if(hash[i]!=0){ Isok=0; } } return Isok; } }; 返回数组交集——set方案 349. 两个数组的交集\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #迭代器吗，学到新东西了 class Solution { public: vector\u0026lt;int\u0026gt; intersection(vector\u0026lt;int\u0026gt;\u0026amp; nums1, vector\u0026lt;int\u0026gt;\u0026amp; nums2) { unordered_set\u0026lt;int\u0026gt; result; unordered_set\u0026lt;int\u0026gt; nums_set(nums1.begin(),nums1.end()); for(int num: nums2){ if (nums_set.find(num)!=nums_set.end()){ result.insert(num); } } return vector\u0026lt;int\u0026gt;(result.begin(),result.end()); } }; 求两数之和——map方案 1. 两数之和\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #梦开始的地方， #初始化列表；哈希图等相关操作，要记的有点多啊 class Solution { public: vector\u0026lt;int\u0026gt; twoSum(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target) { unordered_map\u0026lt;int,int\u0026gt; map; for(int i=0;i\u0026lt;nums.size();i++){ auto infe=map.find(target-nums[i]); if(infe!=map.end()){ return {infe-\u0026gt;second,i}; } map.insert(pair\u0026lt;int,int\u0026gt;(nums[i],i)); } return {}; } }; iter-\u0026gt;second\niter 是一个 map\u0026lt;int, int\u0026gt;::iterator（迭代器）。 iter-\u0026gt;first 是键（key），即之前存入的数值； iter-\u0026gt;second 是值（value），通常是之前那个数的索引（下标）。 四数相加——map方案 454. 四数相加 II\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #key为A+B数组值和，value为该和出现次数，随后以[0-（C+D）]的值检索map，匹配的计数变量增加对应的value #分治，四重for循环变为二次二重for循环。 class Solution { public: int fourSumCount(vector\u0026lt;int\u0026gt;\u0026amp; nums1, vector\u0026lt;int\u0026gt;\u0026amp; nums2, vector\u0026lt;int\u0026gt;\u0026amp; nums3, vector\u0026lt;int\u0026gt;\u0026amp; nums4) { unordered_map\u0026lt;int,int\u0026gt; map; int a=0; for(int i=0;i\u0026lt;nums1.size();i++){ for(int j=0;j\u0026lt;nums2.size();j++){ a=nums1[i]+nums2[j]; map[a]++; } } int count=0; for(int i=0;i\u0026lt;nums3.size();i++){ for(int j=0;j\u0026lt;nums4.size();j++){ a=0-(nums3[i]+nums4[j]); count+=map[a]; } } return count; } }; 三数之和 15. 三数之和\n1 2 #时隔多日，再战梦碎 # ","date":"2025-04-21T21:30:49+08:00","permalink":"https://CoCoHina.github.io/p/learn-%E7%AE%97%E6%B3%95/","title":"Learn 算法"},{"content":"FLCL——特别的她 如果不挥棒，什么也不会发生。\n——春原晴子 青春期的少年，脑内蹦出的机器人，大自己许多的女高中生，同班的班长，天降的粉毛摇滚女。如童年时幻想的冒险故事一样，少年的日常生活，于傍晚的大桥上一去不返。这部片的叙事不太讲逻辑，自然观看时也不必太过在意逻辑。有谁会细究一个少年幻想的冒险故事呢？让心随着躁动的音符跳动，去感受青春的味道吧。\nRevue Starlight 列车会驶往下一站。那么舞台呢？那么我们呢？\n——大场奈奈 被真昼女士的挺好颜吸引，被舞台少女们的内心活动俘获。两天看完TV+剧场版，我成了最空虚的人呢。内心重涂具象为以命相搏的舞台格斗，对目标的追求与热爱则是驱动舞台装置的燃料，相当新颖的设定。结局却相当现实，临近毕业、确定志向、盛大的毕业典礼，最后各奔东西。后劲真大啊，感觉就像喝了很烈的酒一样。\nps:🍌蕉哥哥是对的，在重演一回吧！\nps的ps:不熟悉Typora的操作，第一回编辑全部木大，我的心，好痛。😭\n","date":"2025-04-20T10:05:29+08:00","image":"https://CoCoHina.github.io/p/flclrevuestarlight/8d19f7359407c962446f52949a8fc32f456239958_hu_fac722309904dd21.png","permalink":"https://CoCoHina.github.io/p/flclrevuestarlight/","title":"FLCL\u0026RevueStarlight"}]